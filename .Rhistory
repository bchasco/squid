,"Epsilon2" = 1)
#8) Density dependent covariates
#None for now
# install.packages("splines")
library(splines)
formula = ~ bs( log(Station_Depth_m), knots=3, intercept=FALSE)
# covariate_data <- data.frame(Lat=raw$Lat,Lon=raw$Lat,Year=raw$Year,Station_Depth_m=raw$Station_Depth_m/100)
covariate_data <- data.frame(Lat=raw$Lat,Lon=raw$Lat,Year=NA,Station_Depth_m=raw$Station_Depth_m/100)
covariate_data$Year <- NA
#9) Catchability associated with vessel
Q_ik <- raw[,c('X3m_Temp','X3m_Salinity','X3m_Chl')] #rep(1,nrow(raw))
for(i in 1:ncol(Q_ik)){
Q_ik[is.na(Q_ik[,i]),i] <- mean(na.omit(Q_ik[,i]))
}
#10) Area offsets
a_i <- rep(1,nrow(raw))
#11) Over dispersion vessel effects
#This treats the vessel and MMED effects as fixed
OverdispersionConfig = c("Eta1"=0, "Eta2"=0)
#12)The observation model is
ObsModel = c(2,0) # Distribution for data, and link-function for linear predictors
#13) Options for derived quantities
Options = c(SD_site_density = 0
,SD_site_logdensity = 0
,Calculate_Range = 1 #Center of gravity
,Calculate_evenness = 0
,Calculate_effective_area = 1
,Calculate_Cov_SE = 0
,Calculate_Synchrony = 0
,Calculate_Coherence = 0)
settings <- make_settings(
n_x = n_x
# ,grid_size_km = grid_size_km
# ,randomseed = Kmeans_Config[["randomseed"]]
# ,nstart = Kmeans_Config[["nstart"]]
# ,iter.max = Kmeans_Config[["iter.max"]]
,Region = "california_current"
,purpose = "index2"
,strata.limits = strata.limits
,FieldConfig = FieldConfig
,RhoConfig = RhoConfig
,OverdispersionConfig = OverdispersionConfig
,ObsModel = ObsModel
,knot_method = "samples"
,bias.correct = FALSE
,fine_scale=TRUE #Added this flag because Thorson had it in his covariates example. I'll see if it helps.
,Options = Options
)
settings = make_settings( n_x=100,
Region="california_crrent",#example$Region,
purpose="index",
use_anisotropy=FALSE,
bias.correct=FALSE,
fine_scale=TRUE )
settings = make_settings( n_x=100,
Region="california_current",#example$Region,
purpose="index",
use_anisotropy=FALSE,
bias.correct=FALSE,
fine_scale=TRUE )
settings <- make_settings(
n_x = n_x
# ,grid_size_km = grid_size_km
# ,randomseed = Kmeans_Config[["randomseed"]]
# ,nstart = Kmeans_Config[["nstart"]]
# ,iter.max = Kmeans_Config[["iter.max"]]
,Region = "california_current"
,purpose = "index2"
,strata.limits = strata.limits
,FieldConfig = FieldConfig
,RhoConfig = RhoConfig
,OverdispersionConfig = OverdispersionConfig
,ObsModel = ObsModel
,knot_method = "samples"
,bias.correct = FALSE
,fine_scale=TRUE #Added this flag because Thorson had it in his covariates example. I'll see if it helps.
,Options = Options
)
settings = make_settings( n_x=100,
Region = "california_current",
purpose="index",
use_anisotropy=FALSE,
bias.correct=FALSE,
fine_scale=TRUE )
settings = make_settings( n_x=100,
Region = "california_current",
strata.limits = strata.limits,
purpose="index",
use_anisotropy=FALSE,
bias.correct=FALSE,
fine_scale=TRUE )
n_i <- nrow(raw)
fit <- fit_model(settings = settings
,Lat_i = raw$Lat
,Lon_i = raw$Long
,t_iz = raw$Year
,c_iz = c_iz
,b_i = raw$CPUE #Number of squid captured.
,a_i = rep(0.01,n_i)
,v_i = rep(1,n_i)
,Q_ik = as.matrix(Q_ik)
,formula=formula
,covariate_data=covariate_data
)
fit$data_list$X_gtp
fit$data_list$X_itp
range(fit$data_list$X_itp)
range(fit$data_list$X_gtp)
# Load packages
library(VAST)
library(splines)
# load data set
# see `?load_example` for list of stocks with example data
# that are installed automatically with `FishStatsUtils`.
example = load_example( data_set="covariate_example" )
# Make settings (turning off bias.correct to save time for example)
settings = make_settings( n_x=100,
Region=example$Region,
purpose="index",
use_anisotropy=FALSE,
bias.correct=FALSE,
fine_scale=TRUE )
# Define formula.  In this case I'm demonstrating how to use a basis-spline with
# three degrees of freedom to model a nonlinear effect of log-transformed bottom depth,
# based on example developed by Nicholas Ducharme-Barth.
formula = ~ bs( log(BOT_DEPTH), knots=3, intercept=FALSE)
# set Year = NA to treat all covariates as "static" (not changing among years)
# If using a mix of static and dynamic covariates, please email package author to add easy capability
example$covariate_data[,'Year'] = NA
# Rescale covariates being used to have an SD >0.1 and <10 (for numerical stability)
example$covariate_data[,'BOT_DEPTH'] = example$covariate_data[,'BOT_DEPTH'] / 100
# Run model
fit = fit_model( "settings" = settings,
Lat_i = example$sampling_data[,'Lat'],
Lon_i = example$sampling_data[,'Lon'],
t_i = example$sampling_data[,'Year'],
b_i = example$sampling_data[,'Catch_KG'],
a_i = example$sampling_data[,'AreaSwept_km2'],
formula = formula,
covariate_data = example$covariate_data )
#
plot( fit,
plot_set=c(3,11,13,14),
TmbData=fit$data_list )
fit$data_list$Xconfig_zcp
fit$data_list$X_gtp
dim(fit$data_list$X_gtp)
dim(fit$data_list$X_itp)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
fit <- fit_model(settings = settings
,Lat_i = raw$Lat
,Lon_i = raw$Long
,t_iz = raw$Year
,c_iz = c_iz
,b_i = raw$CPUE #Number of squid captured.
,a_i = rep(0.01,n_i)
,v_i = rep(1,n_i)
# ,Q_ik = as.matrix(Q_ik)
,formula=formula
,covariate_data=covariate_data
)
fit$data_list$X_gtp
dim(fit$data_list$X_gtp)
dim(fit$data_list$X_itp)
#Data
# raw <- read.csv("comb_catches.csv")
raw <- read.csv("Update_Comb_Catch_wTrawlDist.csv")
head(raw)
library(dplyr)
#Data
# raw <- read.csv("comb_catches.csv")
raw <- read.csv("Update_Comb_Catch_wTrawlDist.csv")
sum(is.na(raw))
apply(raw,1,is.na())
apply(raw,1,is.na
)
sum(apply(raw,1,is.na))
dim(raw)
raw_test <- raw[!apply(raw,1,is.na),]
dim(raw_test)
x <- apply(raw,1,is.na)
length(x)
dim(raw[!is.na(raw),])
raw_test <- raw[!apply(raw,1,function(x)return(sum(is.na(x)))),]
dim(raw_test)
sum(is.na(raw_test))
#Data
# raw <- read.csv("comb_catches.csv")
raw <- read.csv("Update_Comb_Catch_wTrawlDist.csv")
#Get rid of any blanks
raw <- raw[!apply(raw,1,function(x)return(sum(is.na(x)))),]
dim(raw)
raw$TrawlDist_km
head(raw)
agg_catch <- TRUE #Aggregate the small and large squid catches
agg_catch <- FALSE #Disaggregate the small and large squid catches
if(agg_catch==TRUE){
raw <- aggregate(list(catch=raw$catch), by=list(Survey=raw$Survey,
Year=raw$Year,
Lat=raw$Lat,
Lon=raw$Lon,
TrawlDist_km=raw$TrawlDist_km,
Station_Depth_m=raw$Station_Depth_m,
X3m_Temp=raw$X3m_Temp,
X3m_Salinity=raw$X3m_Salinity,
X3m_Chl=raw$X3m_Chl),
sum)
}
#Data
# raw <- read.csv("comb_catches.csv")
raw <- read.csv("Update_Comb_Catch_wTrawlDist.csv")
#Get rid of any blanks
raw <- raw[!apply(raw,1,function(x)return(sum(is.na(x)))),]
agg_catch <- TRUE #Aggregate the small and large squid catches
agg_catch <- FALSE #Disaggregate the small and large squid catches
if(agg_catch==TRUE){
#aggregate the data
raw <- aggregate(list(catch=raw$catch), by=list(Survey=raw$Survey,
Year=raw$Year,
Lat=raw$Lat,
Lon=raw$Lon,
TrawlDist_km=raw$TrawlDist_km,
Station_Depth_m=raw$Station_Depth_m,
X3m_Temp=raw$X3m_Temp,
X3m_Salinity=raw$X3m_Salinity,
X3m_Chl=raw$X3m_Chl),
sum)
raw$size <- 1 #single size class
}
#2) Single size class for now
c_iz <- raw$size
#3) CPUE for now must change it to numbers
b_i <- raw$catch
#4) Spatial and Spatio-temporal for both encounter and positive catches, see #6)
FieldConfig = c("Omega1" = 0
,"Epsilon1" = 0
,"Omega2" = 0
,"Epsilon2" = 0)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
table(raw$Year,raw$size)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
?fit_model
names(raw)
#Data
# raw <- read.csv("comb_catches.csv")
raw <- read.csv("Update_Comb_Catch_wTrawlDist.csv")
#Get rid of any blanks
raw <- raw[!apply(raw,1,function(x)return(sum(is.na(x)))),]
names(raw)
#Data
# raw <- read.csv("comb_catches.csv")
raw <- read.csv("Update_Comb_Catch_wTrawlDist_flat.csv")
#Get rid of any blanks
raw <- raw[!apply(raw,1,function(x)return(sum(is.na(x)))),]
names(raw)
#2) Single size class for now
c_iz <- raw[,c("CPUE.80","CPUE.80.1")]
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
?VAST::Data_Fn
table(c_iz)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
?Data_Fn
?make_data
c_iz
table(c_iz)
#Data
# raw <- read.csv("comb_catches.csv")
raw <- read.csv("Update_Comb_Catch_wTrawlDist_flat.csv")
# Load packages
library( VAST )
# load data set
# see `?load_example` for list of stocks with example data
# that are installed automatically with `FishStatsUtils`.
example = load_example( data_set = "goa_arrowtooth_condition_and_density" )
# Format data
b_i = ifelse( !is.na(example$sampling_data[,'cpue_kg_km2']),
example$sampling_data[,'cpue_kg_km2'],
example$sampling_data[,'weight_g'] )
c_i = ifelse( !is.na(example$sampling_data[,'cpue_kg_km2']), 0, 1 )
Q_i = ifelse(!is.na(example$sampling_data[,'cpue_kg_km2']),
0, log(example$sampling_data[,'length_mm']/10) )
example = load_example( data_set = "goa_arrowtooth_condition_and_density" )
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
#Data
# raw <- read.csv("comb_catches.csv")
raw <- read.csv("Update_Comb_Catch_wTrawlDist_flat.csv")
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
for(i in plot_ids[1]){
plot_results(fit=fit
,working_dir = plot_dir
,plot_set = i)
}
45*8
as.factor(raw$Survey)
#2) Single size class for now
# c_iz <- rep(0,dim(raw)[1]) #This needs to be numeric starting at 0
c_iz <- as.integer(as.factor(raw$Survey)) #This needs to be numeric starting at 0
c_iz
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
head(raw)
table(c_iz)
#Data
# raw <- read.csv("comb_catches.csv")
raw <- read.csv("Update_Comb_Catch_wTrawlDist.csv")
head(raw)
table(raw$size)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
as.factor(raw$Survey)
#2) Single size class for now
# c_iz <- rep(0,dim(raw)[1]) #This needs to be numeric starting at 0
c_iz <- as.integer(as.factor(raw$size))-1 #This needs to be numeric starting at 0
table(c_iz)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
b_i
head(raw)
source('C:/NOAA/PROJECTS/squid/SquidAnalysis_VAST.r', echo=TRUE)
fit$parameter_estimates
fit$parameter_estimates
fit$parameter_estimates$par
plot_results(fit=fit
,years_to_plot = c(2000,2001)
,working_dir = plot_dir
,plot_set = i)
plot_results(fit=fit
,years_to_plot = c(2000,2001)
,working_dir = plot_dir
,plot_set = 6)
plot_results(fit=fit
,years_to_plot = c(3,4)
,working_dir = plot_dir
,plot_set = 6)
Data_Geostat
Cov_List = Summarize_Covariance(Report = Report, ParHat = Obj$env$parList(),
Data = TmbData, SD = Opt$SD, plot_cor = FALSE,
category_names = levels(raw[, "size"]),
plotTF = FieldConfig, mgp = c(2,0.5, 0), tck = -0.02, oma = c(0, 5, 2, 2))
Report
Obj$env$parList()
fit$env$parList()
ls()
fit$tmb_list$Obj$env$parList()
fit$Report
fit$Opt$SD
fit$data_list
raw[, "size"]
table(raw[, "size"])
FieldConfig
Cov_List = Summarize_Covariance(Report = fit$Report, ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list, SD = fit$Opt$SD, plot_cor = FALSE,
category_names = levels(raw[, "size"]),
plotTF = FieldConfig, mgp = c(2,0.5, 0), tck = -0.02, oma = c(0, 5, 2, 2))
Summarize_Covariance()
?Summarize_Covariance
?FishStatsUtils::summarize_covariace
?FishStatsUtils::summarize_covariance
FieldConfig
fit$Report
fit$tmb_list$Obj$env$parList()
fit$data_list
Cov_List = Summarize_Covariance(Report = fit$Report, ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list, SD = fit$Opt$SD, plot_cor = FALSE,
category_names = levels(raw[, "size"])-1,
plotTF = FieldConfig,
mgp = c(2,0.5, 0), tck = -0.02, oma = c(0, 5, 2, 2))
Cov_List = summarize_covariance(Report = fit$Report, ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list, SD = fit$Opt$SD, plot_cor = FALSE,
category_names = levels(raw[, "size"])-1,
plotTF = FieldConfig,
mgp = c(2,0.5, 0), tck = -0.02, oma = c(0, 5, 2, 2))
Cov_List = summarize_covariance(Report = fit$Report, ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list, SD = fit$Opt$SD, plot_cor = FALSE,
category_names = levels(raw[, "size"])-1,
plotTF = as.vector(FieldConfig),
mgp = c(2,0.5, 0), tck = -0.02, oma = c(0, 5, 2, 2))
Cov_List = summarize_covariance(Report = fit$Report, ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list, SD = fit$Opt$SD, plot_cor = FALSE,
category_names = levels(raw[, "size"])-1,
plotTF = c(1,0,0,0),
mgp = c(2,0.5, 0), tck = -0.02, oma = c(0, 5, 2, 2))
FieldConfig
as.vector(FieldConfig)
Cov_List = summarize_covariance(Report = fit$Report, ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list, SD = fit$Opt$SD, plot_cor = FALSE,
category_names = c("1","2"),
plotTF = as.vector(FieldConfig),
mgp = c(2,0.5, 0), tck = -0.02, oma = c(0, 5, 2, 2))
summarize_covariance
calc_cov
loadings_matrix
fit$data_list$n_c
Cov_List = summarize_covariance(Report = fit$Report,
ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list,
SD = fit$Opt$SD, plot_cor = FALSE,
category_names = c("1","2"),
# plotTF = as.vector(FieldConfig),
mgp = c(2,0.5, 0),
tck = -0.02,
oma = c(0, 5, 2, 2))
Cov_List = summarize_covariance(Report = fit$Report,
ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list,
SD = fit$Opt$SD, plot_cor = FALSE,
category_names = c("1","2"),
plotTF = as.integer(FieldConfig),
mgp = c(2,0.5, 0),
tck = -0.02,
oma = c(0, 5, 2, 2))
Cov_List = summarize_covariance(Report = fit$Report,
ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list,
SD = fit$Opt$SD, plot_cor = FALSE,
category_names = c("1","2"),
plotTF = as.matrix(FieldConfig),
mgp = c(2,0.5, 0),
tck = -0.02,
oma = c(0, 5, 2, 2))
Cov_List = summarize_covariance(Report = fit$Report,
ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list,
SD = fit$Opt$SD, plot_cor = FALSE,
# category_names = c("1","2"),
plotTF = FieldConfig,
mgp = c(2,0.5, 0),
tck = -0.02,
oma = c(0, 5, 2, 2))
Cov_List = summarize_covariance(Report = fit$Report,
ParHat = fit$tmb_list$Obj$env$parList(),
Data = fit$data_list,
SD = fit$Opt$SD,
plot_cor = TRUE,
# category_names = c("1","2"),
plotTF = FieldConfig,
mgp = c(2,0.5, 0),
tck = -0.02,
oma = c(0, 5, 2, 2))
Method = c("Grid", "Mesh", "Spherical_mesh")[2]
grid_size_km = 50
n_x = c(50, 100, 250, 500, 1000, 2000)[1] # Number of stations
Kmeans_Config = list( "randomseed"=1, "nstart"=100, "iter.max"=1e3 )
FieldConfig = c(Omega1 = 3, Epsilon1 = 3, Omega2 = 3,
Epsilon2 = 3)
RhoConfig = c(Beta1 = 0, Beta2 = 0, Epsilon1 = 0, Epsilon2 = 0)
OverdispersionConfig = c(Vessel = 0, VesselYear = 0)
ObsModel = c(2, 0)
Options = c(SD_site_density = 0, SD_site_logdensity = 0,
Calculate_Range = 1, Calculate_evenness = 0, Calculate_effective_area = 1,
Calculate_Cov_SE = 0, Calculate_Synchrony = 0,
Calculate_Coherence = 0)
strata.limits <- data.frame(STRATA = "All_areas")
Region = "Eastern_Bering_Sea"
Species_set = c("Atheresthes stomias","Gadus chalcogrammus","Hippoglossoides elassodon")
DateFile = paste0(getwd(),'/VAST_output/')
dir.create(DateFile)
DateFile = paste0(getwd(),'/VAST_output2/')
dir.create(DateFile)
Record = list(Version = Version, Method = Method, grid_size_km = grid_size_km,
n_x = n_x, FieldConfig = FieldConfig, RhoConfig = RhoConfig,
OverdispersionConfig = OverdispersionConfig, ObsModel = ObsModel,
Kmeans_Config = Kmeans_Config, Region = Region,
Species_set = Species_set, strata.limits = strata.limits)
save(Record, file = file.path(DateFile, "Record.RData"))
capture.output(Record, file = paste0(DateFile, "Record.txt"))
Version = "VAST_v2_0_0"
Options = c(SD_site_density = 0, SD_site_logdensity = 0,
Calculate_Range = 1, Calculate_evenness = 0, Calculate_effective_area = 1,
Calculate_Cov_SE = 0, Calculate_Synchrony = 0,
Calculate_Coherence = 0)
Record = list(Version = Version, Method = Method, grid_size_km = grid_size_km,
n_x = n_x, FieldConfig = FieldConfig, RhoConfig = RhoConfig,
OverdispersionConfig = OverdispersionConfig, ObsModel = ObsModel,
Kmeans_Config = Kmeans_Config, Region = Region,
Species_set = Species_set, strata.limits = strata.limits)
save(Record, file = file.path(DateFile, "Record.RData"))
capture.output(Record, file = paste0(DateFile, "Record.txt"))
DF = FishData::download_catch_rates(survey = "Eastern_Bering_Sea",
species_set = Species_set)
Data_Geostat = data.frame(spp = DF[, "Sci"], Year = DF[,
"Year"], Catch_KG = DF[, "Wt"], AreaSwept_km2 = 0.01,
Vessel = 0, Lat = DF[, "Lat"], Lon = DF[, "Long"])
DF = FishData::download_catch_rates(survey = "Eastern_Bering_Sea",
species_set = Species_set)
library(FishStatsUtils)
DF = download_catch_rates(survey = "Eastern_Bering_Sea",
species_set = Species_set)
install.packages("FishData")
cite
cite(VAST)
cite('VAST')
citation(VAST)
citation('VAST')
